public void Entrena(double alpha, double[] E, double[] S) {
//Ajusta pesos capa3 ==> capa4
for (int j = 1; j <= neuronasporcapa[3]; j++)
for (int i = 1; i <= neuronasporcapa[4]; i++) {
double Yi = A[4, i];
double dE3 = A[3, j] * (Yi - S[i]) * Yi * (1 - Yi);
WN[3, j, i] = W[3, j, i] - alpha * dE3; //Nuevo peso se guarda temporalmente
}
//Ajusta pesos capa2 ==> capa3
for (int j = 1; j <= neuronasporcapa[2]; j++)
for (int k = 1; k <= neuronasporcapa[3]; k++) {
double acum = 0;
for (int i = 1; i <= neuronasporcapa[4]; i++) {
double Yi = A[4, i];
acum += W[3, k, i] * (Yi - S[i]) * Yi * (1 - Yi);
}
double dE2 = A[2, j] * A[3, k] * (1 - A[3, k]) * acum;
WN[2, j, k] = W[2, j, k] - alpha * dE2; //Nuevo peso se guarda temporalmente
}
//Ajusta pesos capa1 ==> capa2
for (int j = 1; j <= neuronasporcapa[1]; j++)
for (int k = 1; k <= neuronasporcapa[2]; k++) {
double acumular = 0;
for (int p = 1; p <= neuronasporcapa[3]; p++) {
double acum = 0;
for (int i = 1; i <= neuronasporcapa[4]; i++) {
Rafael Alberto Moreno Parra
85double Yi = A[4, i];
acum += W[3, p, i] * (Yi - S[i]) * Yi * (1 - Yi);
}
acumular += W[2, k, p] * A[3, p] * (1 - A[3, p]) * acum;
}
double dE1 = E[j] * A[2, k] * (1 - A[2, k]) * acumular;
WN[1, j, k] = W[1, j, k] - alpha * dE1; //Nuevo peso se guarda temporalmente
}
//Ajusta umbrales de neuronas de la capa 4
for (int i = 1; i <= neuronasporcapa[4]; i++) {
double Yi = A[4, i];
double dE4 = (Yi - S[i]) * Yi * (1 - Yi);
UN[4, i] = U[4, i] - alpha * dE4; //Nuevo umbral se guarda temporalmente
}
//Ajusta umbrales de neuronas de la capa 3
for (int k = 1; k <= neuronasporcapa[3]; k++) {
double acum = 0;
for (int i = 1; i <= neuronasporcapa[4]; i++) {
double Yi = A[4, i];
acum += W[3, k, i] * (Yi - S[i]) * Yi * (1 - Yi);
}
double dE3 = A[3, k] * (1 - A[3, k]) * acum;
UN[3, k] = U[3, k] - alpha * dE3; //Nuevo umbral se guarda temporalmente
}
//Ajusta umbrales de neuronas de la capa 2
for (int k = 1; k <= neuronasporcapa[2]; k++) {
double acumular = 0;
for (int p = 1; p <= neuronasporcapa[3]; p++) {
double acum = 0;
for (int i = 1; i <= neuronasporcapa[4]; i++) {
double Yi = A[4, i];
acum += W[3, p, i] * (Yi - S[i]) * Yi * (1 - Yi);
}
acumular += W[2, k, p] * A[3, p] * (1 - A[3, p]) * acum;
}
double dE2 = A[2, k] * (1 - A[2, k]) * acumular;
UN[2, k] = U[2, k] - alpha * dE2; //Nuevo umbral se guarda temporalmente
}